{
  "{ readonly ark: \"type\"; }": "{ readonly ark: \"type\" }",
  "number": "number",
  "{ ark: string; }": "{ ark: string }",
  "{ ark: string; type: string; vali: string; opti: string; from: string; to: string; }": "{\n\tark: string\n\ttype: string\n\tvali: string\n\topti: string\n\tfrom: string\n\tto: string\n}",
  "{ re: string; }": "{ re: string }",
  "Type<moreThan<0>, {}>": "Type<moreThan<0>, {}>",
  "Type<lessThan<10>, {}>": "Type<lessThan<10>, {}>",
  "Type<atMost<-49>, {}>": "Type<atMost<-49>, {}>",
  "Type<3211993, {}>": "Type<3211993, {}>",
  "Type<is<MoreThan<-5> & AtMost<5>>, {}>": "Type<is<MoreThan<-5> & AtMost<5>>, {}>",
  "Type<is<AtLeast<-3.23> & LessThan<4.654>>, {}>": "Type<is<AtLeast<-3.23> & LessThan<4.654>>, {}>",
  "Type<moreThan<3>, {}>": "Type<moreThan<3>, {}>",
  "Type<before<\"2023/1/12\">, {}>": "Type<before<\"2023/1/12\">, {}>",
  "Type<literal<\"2020-1-1\">, {}>": "Type<literal<\"2020-1-1\">, {}>",
  "is<After<\"2001/10/10\"> & Before<\"2005/10/10\">>": "is<After<\"2001/10/10\"> & Before<\"2005/10/10\">>",
  "Type<is<After<\"2000\"> & AtOrBefore<string>>, {}>": "Type<is<After<\"2000\"> & AtOrBefore<string>>, {}>",
  "{ foo: string; bar: (In?: number | undefined) => Default<5>; }": "{\n\tfoo: string\n\tbar: (In?: number | undefined) => Default<5>\n}",
  "(In?: string | undefined) => Default<\"\">": "(In?: string | undefined) => Default<\"\">",
  "Type<(In: { a: string; }) => Out<{ b: string; }>, {}>": "Type<(In: { a: string }) => Out<{ b: string }>, {}>",
  "Module<{ public: true | 3 | uuid | \"no\"; hasCrept: true; }>": "Module<{\n\tpublic: true | 3 | uuid | \"no\"\n\thasCrept: true\n}>",
  "ArkClass": "ArkClass",
  "(In: string) => Out<\"foo!\">": "(In: string) => Out<\"foo!\">",
  "{ foo: (In: integer) => Out<number>; }": "{ foo: (In: integer) => Out<number> }",
  "object": "object",
  "{ a: optional; }": "{ a: optional }",
  "{ a: number; b: boolean; }": "{ a: number; b: boolean }",
  "Type<(In: { a: 1; b: 2; }) => Out<string>, { a: (In: { a: 1; }) => Out<string>; b: { b: 2; }; c: (In: { a: 1; b: 2; }) => Out<string>; }>": "Type<\n\t(In: { a: 1; b: 2 }) => Out<string>,\n\t{\n\t\ta: (In: { a: 1 }) => Out<string>\n\t\tb: { b: 2 }\n\t\tc: (In: { a: 1; b: 2 }) => Out<string>\n\t}\n>",
  "Type<{ l: 1; n: (In: numeric) => To<number>; } | { r: 1; n: (In: numeric) => To<number>; }, {}>": "Type<\n\t| { l: 1; n: (In: numeric) => To<number> }\n\t| { r: 1; n: (In: numeric) => To<number> },\n\t{}\n>",
  "{ id?: string; coll?: string; ts?: TimeStub; ttl?: TimeStub; user: TimeStub | { name: string; accounts?: cyclic[]; }; provider: \"GitHub\" | \"Google\"; providerUserId: string; }": "{\n\tid?: string\n\tcoll?: string\n\tts?: TimeStub\n\tttl?: TimeStub\n\tuser: TimeStub | { name: string; accounts?: cyclic[] }\n\tprovider: \"GitHub\" | \"Google\"\n\tproviderUserId: string\n}",
  "(In: string) => Out<`${string}++`>": "(In: string) => Out<`${string}++`>",
  "{ first_name?: (In: string) => To<is<AtLeastLength<1> & AtMostLength<3>>>; }": "{\n\tfirst_name?: (\n\t\tIn: string\n\t) => To<is<AtLeastLength<1> & AtMostLength<3>>>\n}",
  "{ type: \"file\"; name: is<MoreThanLength<0> & LessThanLength<255>>; } | { type: \"directory\"; name: is<MoreThanLength<0> & LessThanLength<255>>; children: constrain<({ type: \"file\"; name: is<MoreThanLength<0> & LessThanLength<255>>; } | cyclic)[], Narrowed>; }": "\t| {\n\t\t\ttype: \"file\"\n\t\t\tname: is<MoreThanLength<0> & LessThanLength<255>>\n\t  }\n\t| {\n\t\t\ttype: \"directory\"\n\t\t\tname: is<MoreThanLength<0> & LessThanLength<255>>\n\t\t\tchildren: constrain<\n\t\t\t\t(\n\t\t\t\t\t| {\n\t\t\t\t\t\t\ttype: \"file\"\n\t\t\t\t\t\t\tname: is<\n\t\t\t\t\t\t\t\tMoreThanLength<0> & LessThanLength<255>\n\t\t\t\t\t\t\t>\n\t\t\t\t\t  }\n\t\t\t\t\t| cyclic\n\t\t\t\t)[],\n\t\t\t\tNarrowed\n\t\t\t>\n\t  }",
  "Type<{ name: string; } & string[], {}>": "Type<{ name: string } & string[], {}>",
  "[string, string] | ((In: null) => Out<undefined>)": "[string, string] | ((In: null) => Out<undefined>)",
  "{ b: { a: cyclic; }; }": "{ b: { a: cyclic } }",
  "Module<{ a: { b: { a: { b: cyclic; a: cyclic; }; b: cyclic; }; }; b: { a: { b: { a: cyclic; b: cyclic; }; a: cyclic; }; }; }>": "Module<{\n\ta: { b: { a: { b: cyclic; a: cyclic }; b: cyclic } }\n\tb: { a: { b: { a: cyclic; b: cyclic }; a: cyclic } }\n}>",
  "Module<{ a: { b: false | { a: true | cyclic; }; }; b: { a: true | { b: false | cyclic; }; }; }>": "Module<{\n\ta: { b: false | { a: true | cyclic } }\n\tb: { a: true | { b: false | cyclic } }\n}>",
  "{ b: { c: { b: cyclic; c: cyclic; }; }; }": "{ b: { c: { b: cyclic; c: cyclic } } }",
  "{ b: { a: 3 | cyclic; }; }": "{ b: { a: 3 | cyclic } }",
  "Date | ((In: date) => To<Date>)": "Date | ((In: date) => To<Date>)",
  "Scope<{ b: number; mod: Submodule<{ a: number; }>; }>": "Scope<{ b: number; mod: Submodule<{ a: number }> }>",
  "Scope<{ b: number; mod2: Submodule<{ a: number; }>; }>": "Scope<{\n\tb: number\n\tmod2: Submodule<{ a: number }>\n}>",
  "Type<{ foo: { bar: cyclic; }; }, {}>": "Type<{ foo: { bar: cyclic } }, {}>",
  "{ a: string; } | { b: { a: string; } | cyclic; }": "{ a: string } | { b: { a: string } | cyclic }",
  "boolean": "boolean",
  "[{ a: string; b: boolean; }]": "[{ a: string; b: boolean }]",
  "(In: { data: number; } | { data: number; }[]) => To<{ data: number; }[]>": "(\n\tIn: { data: number } | { data: number }[]\n) => To<{ data: number }[]>",
  "Date": "Date",
  "Type<(In: FormData) => To<{ email: email; file: File; tags: (In: string | string[]) => To<string[]>; }>, {}>": "Type<\n\t(\n\t\tIn: FormData\n\t) => To<{\n\t\temail: email\n\t\tfile: File\n\t\ttags: (In: string | string[]) => To<string[]>\n\t}>,\n\t{}\n>",
  "Type<url, {}>": "Type<url, {}>",
  "Type<(In: url) => To<URL>, {}>": "Type<(In: url) => To<URL>, {}>",
  "{ a: (In?: string | undefined) => Default<\"\">; }": "{ a: (In?: string | undefined) => Default<\"\"> }",
  "{ a?: string; }": "{ a?: string }",
  "{ name: string; } & string[]": "{ name: string } & string[]",
  "[string, string] | null": "[string, string] | null",
  "[string, string] | undefined": "[string, string] | undefined",
  "{ c: { b: cyclic; c: cyclic; }; }": "{ c: { b: cyclic; c: cyclic } }",
  "{ a: 3 | { b: cyclic; }; }": "{ a: 3 | { b: cyclic } }"
}